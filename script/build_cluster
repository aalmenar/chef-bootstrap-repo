#!/usr/bin/env bash
#^syntax detection
set -e
[ -n "$BUILD_CLUSTER_DEBUG" ] && set -x

### Functions

log()   { printf -- "-----> $*\n" ; return $? ; }

usage() {
  printf "

Usage

  $(basename $0) [options] <cluster>

Options

  --tmux,    -t   - Run provisioning commands in parallel in tmux
  --verbose, -v   - Outputs more information
  --dry-run, -n   - Outputs commands to be run, but not execute them
  --help          - Display CLI help (this output)

"
}

### Parsing CLI Arguments

while [[ $# -gt 0 ]] ; do
  token="$1"
  shift

  case "$token" in
--dry-run|-n)
  DRY_RUN=1
  ;;
--verbose|-v)
  VERBOSE=1
  ;;
--tmux|-t)
  RUN_IN_TMUX=1
  ;;
--help|--usage)
  usage
  exit 0
  ;;
*)
  CLUSTER="$token"
  ;;
  esac
done

if [[ -z "$CLUSTER" ]] ; then
  printf ">>>> A cluster was not given.\n"
  usage
  exit 1
fi

if [[ -f "$CLUSTER" ]] ; then
  cluster_yml="$CLUSTER"
else
  cluster_yml="$(dirname $0)/../clusters/${CLUSTER}.yml"
fi

### Perform the Work

# run each resulting knife command output by spiceweasel,
# unless in dry run mode
if [[ ! -f "$cluster_yml" ]] ; then
  printf ">>>> Cluster $CLUSTER could not be found in clusters/.\n"
  usage
  exit 2
fi

in_serial() {
  bundle exec spiceweasel --novalidation "$cluster_yml" | while read knife_command ; do
if [[ -n "$DRY_RUN" ]] ; then
  printf "bundle exec $knife_command\n"
else
  [[ -n "$VERBOSE" ]] && log "Running: 'bundle exec ${knife_command}' ..."
  eval "bundle exec $knife_command"
fi
  done ; unset knife_command
}

in_tmux() {
  local instance=1

  TMPDIR=/tmp tmux new-session -d -s $CLUSTER

  spiceweasel --novalidation "$cluster_yml" | while read knife_command ; do
    TMPDIR=/tmp tmux new-window -t $CLUSTER -n "knife-$instance" "bash"
    TMPDIR=/tmp tmux send-keys \
      -t $CLUSTER:$instance "time ($knife_command)" C-m
    instance=$(($instance+1))
  done ; unset knife_command

  TMPDIR=/tmp tmux kill-window -t $CLUSTER:0
  TMPDIR=/tmp tmux select-window -t $CLUSTER:1
  TMPDIR=/tmp tmux attach-session -t $CLUSTER
}

if [[ -n "$RUN_IN_TMUX" ]] ; then
  in_tmux
else
  time (in_serial)
fi
